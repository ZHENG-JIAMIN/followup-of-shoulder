// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bQFzjFXbkpSsuDuBQNZ8MF
// Component: gS29OBnbSErN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select from "../../Select"; // plasmic-import: kSMvAbxe7o9l/component
import UploadFiles from "../../UploadFiles"; // plasmic-import: uoD6g_MxRxrM/component
import Upload from "../../Upload"; // plasmic-import: aJNGyiE-SJ0S/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import Button from "../../Button"; // plasmic-import: a1WfQs9Vt8cw/component
import Dialog from "../../Dialog"; // plasmic-import: wTSBbjdFii9t/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantspn97G4HNqafa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Pn97G4hNqafa/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bQFzjFXbkpSsuDuBQNZ8MF/projectcss
import sty from "./PlasmicMobileShoulderFollowup.module.css"; // plasmic-import: gS29OBnbSErN/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 9NLJZlnVYXvs/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jDpuVvrlPf7y/icon

createPlasmicElementProxy;

export type PlasmicMobileShoulderFollowup__VariantMembers = {};
export type PlasmicMobileShoulderFollowup__VariantsArgs = {};
type VariantPropType = keyof PlasmicMobileShoulderFollowup__VariantsArgs;
export const PlasmicMobileShoulderFollowup__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMobileShoulderFollowup__ArgsType = {};
type ArgPropType = keyof PlasmicMobileShoulderFollowup__ArgsType;
export const PlasmicMobileShoulderFollowup__ArgProps = new Array<ArgPropType>();

export type PlasmicMobileShoulderFollowup__OverridesType = {
  root?: Flex__<"div">;
  askPain?: Flex__<typeof Select>;
  shoulderFlexionArom?: Flex__<typeof UploadWrapper>;
  shoulderFlexionProm?: Flex__<typeof UploadWrapper>;
  shoulderAbductionArom?: Flex__<typeof UploadWrapper>;
  shoulderAbductionProm?: Flex__<typeof UploadWrapper>;
  shoulderLateralRotationArom?: Flex__<typeof UploadWrapper>;
  shoulderLateralRotationProm?: Flex__<typeof UploadWrapper>;
  shoulderMedialRotationArom?: Flex__<typeof UploadWrapper>;
  shoulderMedialRotationProm?: Flex__<typeof UploadWrapper>;
  shoulderExtensionArom?: Flex__<typeof UploadWrapper>;
  shoulderExtensionProm?: Flex__<typeof UploadWrapper>;
  askMuscleStrength?: Flex__<typeof AntdRadioGroup>;
  askAdLofGettingDressed?: Flex__<typeof AntdRadioGroup>;
  askAdLofCombing?: Flex__<typeof AntdRadioGroup>;
  askAdLofTurnDownTheCollar?: Flex__<typeof AntdRadioGroup>;
  askAdLofWearingAnApron?: Flex__<typeof AntdRadioGroup>;
  askAdLofUsingToiletPaper?: Flex__<typeof AntdRadioGroup>;
  askAdLofRubbingTheOppositeArmpit?: Flex__<typeof AntdRadioGroup>;
  askAdLofFasteningTheBelt?: Flex__<typeof AntdRadioGroup>;
  tooltip?: Flex__<typeof AntdTooltip>;
  svg?: Flex__<"svg">;
  dialog?: Flex__<typeof Dialog>;
};

export interface DefaultMobileShoulderFollowupProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMobileShoulderFollowup__RenderFunc(props: {
  variants: PlasmicMobileShoulderFollowup__VariantsArgs;
  args: PlasmicMobileShoulderFollowup__ArgsType;
  overrides: PlasmicMobileShoulderFollowup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "askPain.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "askAdLofCombing.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "askAdLofTurnDownTheCollar.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "askAdLofWearingAnApron.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "askAdLofUsingToiletPaper.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "askAdLofRubbingTheOppositeArmpit.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "askAdLofFasteningTheBelt.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shoulderFlexionArom.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "shoulderFlexionProm.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "shoulderAbductionArom.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "shoulderAbductionProm.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "shoulderLateralRotationArom.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "shoulderLateralRotationProm.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "shoulderMedialRotationArom.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "shoulderMedialRotationProm.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "shoulderExtensionArom.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "shoulderExtensionProm.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "askAdLofGettingDressed.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "showTip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "result",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "buttonText",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "\u63d0\u4ea4"
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.showDialog;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "showDialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "askMuscleStrength.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspn97G4HNqafa()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__g2Iiy)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d8A4K
              )}
            >
              {"\u968f\u8bbf\u4fe1\u606f\u6536\u96c6-\u80a9\u5173\u8282"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0BaLg
              )}
            >
              {
                "\u8bf7\u5982\u5b9e\u586b\u5199\uff0c\u5eb7\u590d\u5e08\u4f1a\u53ca\u65f6\u6839\u636e\u60a8\u7684\u60c5\u51b5\u5206\u6790\u5f53\u524d\u56de\u590d\u8fdb\u5ea6\u662f\u5426\u6b63\u5e38\uff0c\u5e76\u7ed9\u60a8\u53d1\u9001\u5206\u6790\u62a5\u544a\u3002"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Mo1
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {"1.\u6700\u8fd1\u4e00\u5468\u60a8\u7684"}
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u75bc\u75db\u611f"}
                </span>
                <React.Fragment>
                  {
                    "\u5bf9\u60a8\u7684\u6d3b\u52a8\u5f71\u54cd\u7a0b\u5ea6\u5982\u4f55\uff1f"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <Select
              data-plasmic-name={"askPain"}
              data-plasmic-override={overrides.askPain}
              className={classNames("__wab_instance", sty.askPain)}
              name={"select1"}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["askPain", "value"])(
                  eventArgs[0]
                );
              }}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { label: null, value: null },
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "30";
                __composite["0"]["label"] = "\u65e0\u75db";
                __composite["1"]["value"] = "25";
                __composite["1"]["label"] =
                  "\u6709\u65f6\u7565\u5fae\u75bc\u75db";
                __composite["2"]["label"] =
                  "\u8f7b\u5ea6\u75bc\u75db\uff0c\u666e\u901a\u6d3b\u52a8\u65e0\u969c\u788d";
                __composite["2"]["value"] = "20";
                __composite["3"]["value"] = "10";
                __composite["3"]["label"] =
                  "\u4e2d\u5ea6\u75bc\u75db\uff0c\u80fd\u591f\u5fcd\u53d7";
                __composite["4"]["value"] = "5";
                __composite["4"]["label"] =
                  "\u91cd\u5ea6\u75bc\u75db\uff0c\u6d3b\u52a8\u4e25\u91cd\u53d7\u9650";
                __composite["5"]["value"] = "0";
                __composite["5"]["label"] =
                  "\u56e0\u75bc\u75db\u800c\u5b8c\u5168\u5e76\u4e0d\u80fd\u6d3b\u52a8";
                return __composite;
              })()}
              placeholder={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hv8KB
                  )}
                >
                  {"\u8bf7\u9009\u62e9\u60a8\u7684\u75bc\u75db\u60c5\u51b5"}
                </div>
              }
              value={generateStateValueProp($state, ["askPain", "value"])}
            />

            <div className={classNames(projectcss.all, sty.freeBox__eedQx)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xUeUr)}
                displayHeight={"184px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"366px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/疼痛2Png.png",
                  fullWidth: 1092,
                  fullHeight: 576,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8ToWb
              )}
            >
              <React.Fragment>
                <React.Fragment>{"2.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u5916\u5c55\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2UZgC
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__xbUza)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__uofEv)}
                displayHeight={"110px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_4Jpg.jpg",
                  fullWidth: 1080,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload__cGb1W)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderFlexionArom"}
                    data-plasmic-override={overrides.shoulderFlexionArom}
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderFlexionArom
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderFlexionArom",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderFlexionArom",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__zoppB)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sHcox
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__upVOh)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xcls)}
                displayHeight={"110px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_11Jpg.jpg",
                  fullWidth: 1464,
                  fullHeight: 1464,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload__aE2X7)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderFlexionProm"}
                    data-plasmic-override={overrides.shoulderFlexionProm}
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderFlexionProm
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderFlexionProm",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderFlexionProm",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___9PKnW)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qkKIt
              )}
            >
              <React.Fragment>
                <React.Fragment>{"3.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u524d\u5c48\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f19Rn
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__cb7G7)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__sk4Lv)}
                displayHeight={"110px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_2Jpg.jpg",
                  fullWidth: 1080,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload__qjVj3)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderAbductionArom"}
                    data-plasmic-override={overrides.shoulderAbductionArom}
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderAbductionArom
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderAbductionArom",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderAbductionArom",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vNoGx)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gKjfG
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles___10W71)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__sMCnl)}
                displayHeight={"110px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_10Jpg.jpg",
                  fullWidth: 1464,
                  fullHeight: 1464,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload__glGHq)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderAbductionProm"}
                    data-plasmic-override={overrides.shoulderAbductionProm}
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderAbductionProm
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderAbductionProm",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderAbductionProm",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__uVpFr)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m61Un
              )}
            >
              <React.Fragment>
                <React.Fragment>{"4.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u540e\u4f38\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2QwDq
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__wqklH)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xTwG5)}
                displayHeight={"110px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_1Jpg2.jpg",
                  fullWidth: 1440,
                  fullHeight: 1440,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload__qpvcP)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderLateralRotationArom"}
                    data-plasmic-override={
                      overrides.shoulderLateralRotationArom
                    }
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderLateralRotationArom
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderLateralRotationArom",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderLateralRotationArom",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__qTtTv)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hargx
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__rNc)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__qDtuq)}
                displayHeight={"110px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_9Jpg.jpg",
                  fullWidth: 1464,
                  fullHeight: 1464,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload__oOpg)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderLateralRotationProm"}
                    data-plasmic-override={
                      overrides.shoulderLateralRotationProm
                    }
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderLateralRotationProm
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderLateralRotationProm",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderLateralRotationProm",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__rqv3V)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lxf9Q
              )}
            >
              <React.Fragment>
                <React.Fragment>{"5.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u5916\u65cb\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wSk5F
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__mayEz)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__haHM)}
                displayHeight={"110px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_5Jpg.jpg",
                  fullWidth: 1440,
                  fullHeight: 1440,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload___1MQv1)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderMedialRotationArom"}
                    data-plasmic-override={overrides.shoulderMedialRotationArom}
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderMedialRotationArom
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderMedialRotationArom",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderMedialRotationArom",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___0Ce9P)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kZmoP
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__rrXuE)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__o4YOj)}
                displayHeight={"110px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_6Jpg.jpg",
                  fullWidth: 1464,
                  fullHeight: 1464,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload__dFs2K)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderMedialRotationProm"}
                    data-plasmic-override={overrides.shoulderMedialRotationProm}
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderMedialRotationProm
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderMedialRotationProm",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderMedialRotationProm",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___2RjD)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dmWi4
              )}
            >
              <React.Fragment>
                <React.Fragment>{"6.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u5185\u65cb\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p7C17
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__rhDUr)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__iBmlc)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_3Jpg.jpg",
                  fullWidth: 1440,
                  fullHeight: 1440,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload__nqXnK)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderExtensionArom"}
                    data-plasmic-override={overrides.shoulderExtensionArom}
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderExtensionArom
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderExtensionArom",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderExtensionArom",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___2E2Xa)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wwpEf
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__oi1CA)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__zs9Au)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"110px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_8Jpg.jpg",
                  fullWidth: 1464,
                  fullHeight: 1464,
                  aspectRatio: undefined
                }}
              />

              <Upload
                className={classNames("__wab_instance", sty.upload__isFjy)}
                upload2={
                  <UploadWrapper
                    data-plasmic-name={"shoulderExtensionProm"}
                    data-plasmic-override={overrides.shoulderExtensionProm}
                    accept={"image/*"}
                    className={classNames(
                      "__wab_instance",
                      sty.shoulderExtensionProm
                    )}
                    files={generateStateValueProp($state, [
                      "shoulderExtensionProm",
                      "files"
                    ])}
                    listType={"picture-card"}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "shoulderExtensionProm",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__mWpRa)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"80px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/follow_up_page_of_shoulder_zjm/images/图片1点击上传图片png.png",
                        fullWidth: 444,
                        fullHeight: 290,
                        aspectRatio: undefined
                      }}
                    />
                  </UploadWrapper>
                }
              />
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k8ImW
              )}
            >
              {
                "7.\u6700\u8fd1\u4e00\u5468\u60a8\u7684\u808c\u8089\u529b\u91cf\u63d0\u5347\u72b6\u51b5\u5982\u4f55\uff1f"
              }
            </div>
            <AntdRadioGroup
              data-plasmic-name={"askMuscleStrength"}
              data-plasmic-override={overrides.askMuscleStrength}
              className={classNames("__wab_instance", sty.askMuscleStrength)}
              disabled={false}
              onChange={generateStateOnChangeProp($state, [
                "askMuscleStrength",
                "value"
              ])}
              options={[
                { value: "option1", label: "Option 1" },
                { value: "option2", label: "Option 2" }
              ]}
              useChildren={true}
              value={generateStateValueProp($state, [
                "askMuscleStrength",
                "value"
              ])}
            >
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__vUd3B)}
                value={"5"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bL2B4
                  )}
                >
                  {"5\u7ea7"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__sDze2)}
                value={"4"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qk6Mq
                  )}
                >
                  {"4\u7ea7"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__gJk2Z)}
                value={"3"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__va1IT
                  )}
                >
                  {"3\u7ea7"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__oIkhj)}
                value={"2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Icxn
                  )}
                >
                  {"2\u7ea7"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__n05ZJ)}
                value={"1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3Ul7P
                  )}
                >
                  {"1\u7ea7"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__pBqqc)}
                value={"0"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sx2A
                  )}
                >
                  {"0\u7ea7"}
                </div>
              </AntdRadio>
            </AntdRadioGroup>
            <div className={classNames(projectcss.all, sty.columns__zUtBo)}>
              <div className={classNames(projectcss.all, sty.column__uolJ)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aL0Bt
                  )}
                >
                  {
                    "5\u7ea7\uff1a\u80fd\u5bf9\u6297\u963b\u529b\uff0c\u5e76\u80fd\u4fdd\u6301\u59ff\u52bf"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__jhLtF)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uqugk)}
                  displayHeight={"110px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"110px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_12Jpg.jpg",
                    fullWidth: 1464,
                    fullHeight: 1464,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__vnlAb)}>
              <div className={classNames(projectcss.all, sty.column__rYk1L)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fzjKx
                  )}
                >
                  {
                    "4\u7ea7\uff1a\u80fd\u5bf9\u6297\u963b\u529b\uff0c\u4f46\u4e0d\u80fd\u4fdd\u6301\u59ff\u52bf"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__qMvDn)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uJKda)}
                  displayHeight={"110px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"110px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_7Jpg.jpg",
                    fullWidth: 1464,
                    fullHeight: 1464,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__u9Tkl)}>
              <div className={classNames(projectcss.all, sty.column___9Ob1B)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gOav
                  )}
                >
                  {
                    "3\u7ea7\uff1a\u80fd\u81ea\u4e3b\u5411\u5916\u62ac\u8d77\u80a9\u5173\u8282"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__is3Yx)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xr7Ye)}
                  displayHeight={"110px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"110px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_4Jpg.jpg",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__e5Tn)}>
              <div className={classNames(projectcss.all, sty.column__ozp5M)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gvE5A
                  )}
                >
                  {
                    "2\u7ea7\uff1a\u5728\u5e73\u8eba\u60c5\u51b5\u4e0b\uff0c\u80fd\u5411\u5916\u62ac\u8d77\u80a9\u5173\u8282"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__qddL)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__joDkQ)}
                  displayHeight={"110px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"110px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_155Jpg.jpg",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__bYgtf)}>
              <div className={classNames(projectcss.all, sty.column__h9W9N)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r9SMf
                  )}
                >
                  {
                    "1\u7ea7\uff1a\u4e0d\u80fd\u62ac\u8d77\u80a9\u5173\u8282\uff0c\u4f46\u80fd\u6478\u5230\u808c\u8089\u6536\u7f29"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column___4Dch)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__g4Wm0)}
                  displayHeight={"110px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"110px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_1421Jpg.jpg",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__dm6Pc)}>
              <div className={classNames(projectcss.all, sty.column__nUuy9)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7APOs
                  )}
                >
                  {
                    "0\u7ea7\uff1a\u4e0d\u80fd\u62ac\u8d77\uff0c\u4e5f\u4e0d\u80fd\u6478\u5230\u808c\u8089\u6536\u7f29"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__yx2Sp)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__a6Phi)}
                  displayHeight={"110px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"110px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/_1321Jpg.jpg",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cw5M5
              )}
            >
              {
                "8.\u6700\u8fd1\u4e00\u5468\u60a8\u7684\u65e5\u5e38\u751f\u6d3b\u6d3b\u52a8\u80fd\u529b\u5982\u4f55\uff1f"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__npTi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cz1Bu
                )}
              >
                {" \u7a7f\u4e0a\u8863"}
              </div>
              <AntdRadioGroup
                data-plasmic-name={"askAdLofGettingDressed"}
                data-plasmic-override={overrides.askAdLofGettingDressed}
                className={classNames(
                  "__wab_instance",
                  sty.askAdLofGettingDressed
                )}
                onChange={generateStateOnChangeProp($state, [
                  "askAdLofGettingDressed",
                  "value"
                ])}
                optionType={"button"}
                options={(() => {
                  const __composite = [
                    { value: "option1", label: null },
                    { value: "option2", label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                  __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                  __composite["2"]["value"] = "option 3";
                  __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                  return __composite;
                })()}
                useChildren={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                }
                value={generateStateValueProp($state, [
                  "askAdLofGettingDressed",
                  "value"
                ])}
              >
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio___6SYbu)}
                  value={"5"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tEpbp
                    )}
                  >
                    {"\u5bb9\u6613\u5b8c\u6210"}
                  </div>
                </AntdRadio>
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio___5NwUj)}
                  value={"3"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e36C
                    )}
                  >
                    {"\u52c9\u5f3a\u5b8c\u6210"}
                  </div>
                </AntdRadio>
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__bHywi)}
                  value={"0"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__li5Uz
                    )}
                  >
                    {"\u65e0\u6cd5\u5b8c\u6210"}
                  </div>
                </AntdRadio>
              </AntdRadioGroup>
              <div className={classNames(projectcss.all, sty.freeBox__yHiN0)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nrdoC
                  )}
                >
                  {"\u68b3\u5934"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"askAdLofCombing"}
                  data-plasmic-override={overrides.askAdLofCombing}
                  className={classNames("__wab_instance", sty.askAdLofCombing)}
                  onChange={generateStateOnChangeProp($state, [
                    "askAdLofCombing",
                    "value"
                  ])}
                  optionType={"button"}
                  options={(() => {
                    const __composite = [
                      { value: "option1", label: null },
                      { value: "option2", label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["value"] = "option 3";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  useChildren={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                  value={generateStateValueProp($state, [
                    "askAdLofCombing",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__jEmm5)}
                    value={"5"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9MRrD
                      )}
                    >
                      {"\u5bb9\u6613\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__gshWp)}
                    value={"3"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dnPd1
                      )}
                    >
                      {"\u52c9\u5f3a\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__awvBu)}
                    value={"0"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qv3Cs
                      )}
                    >
                      {"\u65e0\u6cd5\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dG3Xt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yZyC3
                  )}
                >
                  {"\u7ffb\u8863\u9886"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"askAdLofTurnDownTheCollar"}
                  data-plasmic-override={overrides.askAdLofTurnDownTheCollar}
                  className={classNames(
                    "__wab_instance",
                    sty.askAdLofTurnDownTheCollar
                  )}
                  onChange={generateStateOnChangeProp($state, [
                    "askAdLofTurnDownTheCollar",
                    "value"
                  ])}
                  optionType={"button"}
                  options={(() => {
                    const __composite = [
                      { value: "option1", label: null },
                      { value: "option2", label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["value"] = "option 3";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  useChildren={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                  value={generateStateValueProp($state, [
                    "askAdLofTurnDownTheCollar",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__yZnBm)}
                    value={"5"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dxfJh
                      )}
                    >
                      {"\u5bb9\u6613\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio___3Uq2A)}
                    value={"3"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dp6Y4
                      )}
                    >
                      {"\u52c9\u5f3a\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio___3O5Ff)}
                    value={"0"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bwfB3
                      )}
                    >
                      {"\u65e0\u6cd5\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___7Oan4)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dkMj2
                  )}
                >
                  {"\u7cfb\u56f4\u88d9"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"askAdLofWearingAnApron"}
                  data-plasmic-override={overrides.askAdLofWearingAnApron}
                  className={classNames(
                    "__wab_instance",
                    sty.askAdLofWearingAnApron
                  )}
                  onChange={generateStateOnChangeProp($state, [
                    "askAdLofWearingAnApron",
                    "value"
                  ])}
                  optionType={"button"}
                  options={(() => {
                    const __composite = [
                      { value: "option1", label: null },
                      { value: "option2", label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["value"] = "option 3";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  useChildren={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                  value={generateStateValueProp($state, [
                    "askAdLofWearingAnApron",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__ci9IR)}
                    value={"5"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b5Hlo
                      )}
                    >
                      {"\u5bb9\u6613\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__rRteN)}
                    value={"3"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qHyAn
                      )}
                    >
                      {"\u52c9\u5f3a\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__alu2U)}
                    value={"0"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q1WPl
                      )}
                    >
                      {"\u65e0\u6cd5\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___9LfeL)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iTtvP
                  )}
                >
                  {"\u4f7f\u7528\u624b\u7eb8"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"askAdLofUsingToiletPaper"}
                  data-plasmic-override={overrides.askAdLofUsingToiletPaper}
                  className={classNames(
                    "__wab_instance",
                    sty.askAdLofUsingToiletPaper
                  )}
                  onChange={generateStateOnChangeProp($state, [
                    "askAdLofUsingToiletPaper",
                    "value"
                  ])}
                  optionType={"button"}
                  options={(() => {
                    const __composite = [
                      { value: "option1", label: null },
                      { value: "option2", label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["value"] = "option 3";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  useChildren={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                  value={generateStateValueProp($state, [
                    "askAdLofUsingToiletPaper",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__ex09L)}
                    value={"5"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u3KoR
                      )}
                    >
                      {"\u5bb9\u6613\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__mG13G)}
                    value={"3"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hTh8R
                      )}
                    >
                      {"\u52c9\u5f3a\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__pm4T5)}
                    value={"0"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mAqby
                      )}
                    >
                      {"\u65e0\u6cd5\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___2OPUy)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tanQj
                  )}
                >
                  {"\u64e6\u5bf9\u4fa7\u814b\u7a9d"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"askAdLofRubbingTheOppositeArmpit"}
                  data-plasmic-override={
                    overrides.askAdLofRubbingTheOppositeArmpit
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.askAdLofRubbingTheOppositeArmpit
                  )}
                  onChange={generateStateOnChangeProp($state, [
                    "askAdLofRubbingTheOppositeArmpit",
                    "value"
                  ])}
                  optionType={"button"}
                  options={(() => {
                    const __composite = [
                      { value: "option1", label: null },
                      { value: "option2", label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["value"] = "option 3";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  useChildren={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                  value={generateStateValueProp($state, [
                    "askAdLofRubbingTheOppositeArmpit",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__uuByX)}
                    value={"5"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__llZt9
                      )}
                    >
                      {"\u5bb9\u6613\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__fapUz)}
                    value={"3"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1TxPc
                      )}
                    >
                      {"\u52c9\u5f3a\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__pa7Ri)}
                    value={"0"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5Eb97
                      )}
                    >
                      {"\u65e0\u6cd5\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___0Bvqd)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vmshr
                  )}
                >
                  {"\u7cfb\u8170\u5e26"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"askAdLofFasteningTheBelt"}
                  data-plasmic-override={overrides.askAdLofFasteningTheBelt}
                  className={classNames(
                    "__wab_instance",
                    sty.askAdLofFasteningTheBelt
                  )}
                  onChange={generateStateOnChangeProp($state, [
                    "askAdLofFasteningTheBelt",
                    "value"
                  ])}
                  optionType={"button"}
                  options={(() => {
                    const __composite = [
                      { value: "option1", label: null },
                      { value: "option2", label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["value"] = "option 3";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  useChildren={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                  value={generateStateValueProp($state, [
                    "askAdLofFasteningTheBelt",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio___0A3S1)}
                    value={"5"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cOlTh
                      )}
                    >
                      {"\u5bb9\u6613\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__pYrE)}
                    value={"3"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Tbmo
                      )}
                    >
                      {"\u52c9\u5f3a\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio___3BOr)}
                    value={"0"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yq2Fr
                      )}
                    >
                      {"\u65e0\u6cd5\u5b8c\u6210"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </div>
              {(() => {
                try {
                  return $state.showTip;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lVylM
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-Bo2_tT25lwh4)" }}
                    >
                      {
                        "\u8bf7\u586b\u5199\u5b8c\u6210\u6240\u6709\u95ee\u9898\uff01"
                      }
                    </span>
                  </React.Fragment>
                </div>
              ) : null}
            </div>
            <AntdTooltip
              data-plasmic-name={"tooltip"}
              data-plasmic-override={overrides.tooltip}
              className={classNames("__wab_instance", sty.tooltip)}
              titleText={``}
            >
              <Button
                className={classNames("__wab_instance", sty.button__nsdFk)}
                color={"green"}
                onClick={async event => {
                  const $steps = {};

                  $steps["check"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.showTip = !(
                              $state.shoulderFlexionArom.files?.length &&
                              $state.shoulderFlexionProm.files?.length &&
                              $state.shoulderAbductionArom.files?.length &&
                              $state.shoulderAbductionProm.files?.length &&
                              $state.shoulderLateralRotationArom.files
                                ?.length &&
                              $state.shoulderLateralRotationProm.files
                                ?.length &&
                              $state.shoulderMedialRotationArom.files?.length &&
                              $state.shoulderMedialRotationProm.files?.length &&
                              $state.shoulderExtensionArom.files?.length &&
                              $state.shoulderExtensionProm.files?.length &&
                              $state.askAdLofCombing.value &&
                              $state.askPain.value &&
                              $state.askAdLofFasteningTheBelt.value &&
                              $state.askAdLofGettingDressed.value &&
                              $state.askAdLofRubbingTheOppositeArmpit.value &&
                              $state.askAdLofTurnDownTheCollar.value &&
                              $state.askAdLofUsingToiletPaper.value &&
                              $state.askAdLofWearingAnApron.value &&
                              $state.askMuscleStrength.value
                            ));
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["check"] != null &&
                    typeof $steps["check"] === "object" &&
                    typeof $steps["check"].then === "function"
                  ) {
                    $steps["check"] = await $steps["check"];
                  }

                  $steps["waiting"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.buttonText = "上传中...");
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["waiting"] != null &&
                    typeof $steps["waiting"] === "object" &&
                    typeof $steps["waiting"].then === "function"
                  ) {
                    $steps["waiting"] = await $steps["waiting"];
                  }

                  $steps["invokeGlobalAction"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderFlexionArom.files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderFlexionProm.files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["invokeGlobalAction3"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderAbductionArom.files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction3"] != null &&
                    typeof $steps["invokeGlobalAction3"] === "object" &&
                    typeof $steps["invokeGlobalAction3"].then === "function"
                  ) {
                    $steps["invokeGlobalAction3"] = await $steps[
                      "invokeGlobalAction3"
                    ];
                  }

                  $steps["invokeGlobalAction4"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderAbductionProm.files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction4"] != null &&
                    typeof $steps["invokeGlobalAction4"] === "object" &&
                    typeof $steps["invokeGlobalAction4"].then === "function"
                  ) {
                    $steps["invokeGlobalAction4"] = await $steps[
                      "invokeGlobalAction4"
                    ];
                  }

                  $steps["invokeGlobalAction5"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderLateralRotationArom
                                  .files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction5"] != null &&
                    typeof $steps["invokeGlobalAction5"] === "object" &&
                    typeof $steps["invokeGlobalAction5"].then === "function"
                  ) {
                    $steps["invokeGlobalAction5"] = await $steps[
                      "invokeGlobalAction5"
                    ];
                  }

                  $steps["invokeGlobalAction6"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderLateralRotationProm
                                  .files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction6"] != null &&
                    typeof $steps["invokeGlobalAction6"] === "object" &&
                    typeof $steps["invokeGlobalAction6"].then === "function"
                  ) {
                    $steps["invokeGlobalAction6"] = await $steps[
                      "invokeGlobalAction6"
                    ];
                  }

                  $steps["invokeGlobalAction7"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderMedialRotationArom
                                  .files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction7"] != null &&
                    typeof $steps["invokeGlobalAction7"] === "object" &&
                    typeof $steps["invokeGlobalAction7"].then === "function"
                  ) {
                    $steps["invokeGlobalAction7"] = await $steps[
                      "invokeGlobalAction7"
                    ];
                  }

                  $steps["invokeGlobalAction8"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderMedialRotationProm
                                  .files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction8"] != null &&
                    typeof $steps["invokeGlobalAction8"] === "object" &&
                    typeof $steps["invokeGlobalAction8"].then === "function"
                  ) {
                    $steps["invokeGlobalAction8"] = await $steps[
                      "invokeGlobalAction8"
                    ];
                  }

                  $steps["invokeGlobalAction9"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderExtensionArom.files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction9"] != null &&
                    typeof $steps["invokeGlobalAction9"] === "object" &&
                    typeof $steps["invokeGlobalAction9"].then === "function"
                  ) {
                    $steps["invokeGlobalAction9"] = await $steps[
                      "invokeGlobalAction9"
                    ];
                  }

                  $steps["invokeGlobalAction10"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.shoulderExtensionProm.files[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["GlobalContext.upload"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction10"] != null &&
                    typeof $steps["invokeGlobalAction10"] === "object" &&
                    typeof $steps["invokeGlobalAction10"].then === "function"
                  ) {
                    $steps["invokeGlobalAction10"] = await $steps[
                      "invokeGlobalAction10"
                    ];
                  }

                  $steps["processResult"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.result = {
                              pain: $state.askPain.value,
                              muscle_strength: $state.askMuscleStrength.value,
                              images: {
                                ShoulderFlexionAROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderFlexionArom.files[0].uid +
                                  "." +
                                  $state.shoulderFlexionArom.files[0].name.split(
                                    "."
                                  )[1],
                                ShoulderFlexionPROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderFlexionProm.files[0].uid +
                                  "." +
                                  $state.shoulderFlexionProm.files[0].name.split(
                                    "."
                                  )[1],
                                ShoulderAbductionAROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderAbductionArom.files[0].uid +
                                  "." +
                                  $state.shoulderAbductionArom.files[0].name.split(
                                    "."
                                  )[1],
                                ShoulderAbductionPROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderAbductionProm.files[0].uid +
                                  "." +
                                  $state.shoulderAbductionProm.files[0].name.split(
                                    "."
                                  )[1],
                                ShoulderLateralRotationAROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderLateralRotationArom.files[0]
                                    .uid +
                                  "." +
                                  $state.shoulderLateralRotationArom.files[0].name.split(
                                    "."
                                  )[1],
                                ShoulderLateralRotationPROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderLateralRotationProm.files[0]
                                    .uid +
                                  "." +
                                  $state.shoulderLateralRotationProm.files[0].name.split(
                                    "."
                                  )[1],
                                ShoulderMedialRotationAROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderMedialRotationArom.files[0]
                                    .uid +
                                  "." +
                                  $state.shoulderMedialRotationArom.files[0].name.split(
                                    "."
                                  )[1],
                                ShoulderMedialRotationPROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderMedialRotationProm.files[0]
                                    .uid +
                                  "." +
                                  $state.shoulderMedialRotationProm.files[0].name.split(
                                    "."
                                  )[1],
                                ShoulderExtensionAROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderExtensionArom.files[0].uid +
                                  "." +
                                  $state.shoulderExtensionArom.files[0].name.split(
                                    "."
                                  )[1],
                                ShoulderExtensionPROM:
                                  $ctx.store.state.bucket_base_url +
                                  $state.shoulderExtensionProm.files[0].uid +
                                  "." +
                                  $state.shoulderExtensionProm.files[0].name.split(
                                    "."
                                  )[1]
                              },
                              get_dressed: $state.askAdLofGettingDressed.value,
                              comb: $state.askAdLofCombing.value,
                              turn_down_collar:
                                $state.askAdLofTurnDownTheCollar.value,
                              wear_apron: $state.askAdLofWearingAnApron.value,
                              use_tissue: $state.askAdLofUsingToiletPaper.value,
                              wipe_armpit:
                                $state.askAdLofRubbingTheOppositeArmpit.value,
                              fasten_belt: $state.askAdLofFasteningTheBelt.value
                            });
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["processResult"] != null &&
                    typeof $steps["processResult"] === "object" &&
                    typeof $steps["processResult"].then === "function"
                  ) {
                    $steps["processResult"] = await $steps["processResult"];
                  }

                  $steps["invokeGlobalAction11"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $ctx.query.questionaireId;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.result;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $ctx.query.env;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions[
                          "GlobalContext.submitShoulderFollowUpRecord"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction11"] != null &&
                    typeof $steps["invokeGlobalAction11"] === "object" &&
                    typeof $steps["invokeGlobalAction11"].then === "function"
                  ) {
                    $steps["invokeGlobalAction11"] = await $steps[
                      "invokeGlobalAction11"
                    ];
                  }

                  $steps["showDialog"] = !$state.showTip
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.showDialog = true);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["showDialog"] != null &&
                    typeof $steps["showDialog"] === "object" &&
                    typeof $steps["showDialog"].then === "function"
                  ) {
                    $steps["showDialog"] = await $steps["showDialog"];
                  }
                }}
                startIcon={
                  <ChecksvgIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                }
                submitsForm={false}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zqpbp
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.buttonText;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u63d0\u4ea4";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Button>
            </AntdTooltip>
            <Dialog
              data-plasmic-name={"dialog"}
              data-plasmic-override={overrides.dialog}
              body={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xnuxM)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iP7Al
                    )}
                  >
                    {"\u4e0a\u4f20\u6210\u529f\uff01"}
                  </div>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__wry5U)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["goback"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $ctx.query.questionaireId;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return $ctx.query.env;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions[
                              "GlobalContext.goback"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["goback"] != null &&
                        typeof $steps["goback"] === "object" &&
                        typeof $steps["goback"].then === "function"
                      ) {
                        $steps["goback"] = await $steps["goback"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h9YDd
                      )}
                    >
                      {"\u786e\u5b9a"}
                    </div>
                  </AntdButton>
                </Stack__>
              }
              className={classNames("__wab_instance", sty.dialog)}
              noTrigger={true}
              onOpenChange={generateStateOnChangeProp($state, [
                "dialog",
                "open"
              ])}
              open={generateStateValueProp($state, ["dialog", "open"])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__db9ZC
                  )}
                >
                  {"\u63d0\u793a"}
                </div>
              }
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "askPain",
    "shoulderFlexionArom",
    "shoulderFlexionProm",
    "shoulderAbductionArom",
    "shoulderAbductionProm",
    "shoulderLateralRotationArom",
    "shoulderLateralRotationProm",
    "shoulderMedialRotationArom",
    "shoulderMedialRotationProm",
    "shoulderExtensionArom",
    "shoulderExtensionProm",
    "askMuscleStrength",
    "askAdLofGettingDressed",
    "askAdLofCombing",
    "askAdLofTurnDownTheCollar",
    "askAdLofWearingAnApron",
    "askAdLofUsingToiletPaper",
    "askAdLofRubbingTheOppositeArmpit",
    "askAdLofFasteningTheBelt",
    "tooltip",
    "svg",
    "dialog"
  ],
  askPain: ["askPain"],
  shoulderFlexionArom: ["shoulderFlexionArom"],
  shoulderFlexionProm: ["shoulderFlexionProm"],
  shoulderAbductionArom: ["shoulderAbductionArom"],
  shoulderAbductionProm: ["shoulderAbductionProm"],
  shoulderLateralRotationArom: ["shoulderLateralRotationArom"],
  shoulderLateralRotationProm: ["shoulderLateralRotationProm"],
  shoulderMedialRotationArom: ["shoulderMedialRotationArom"],
  shoulderMedialRotationProm: ["shoulderMedialRotationProm"],
  shoulderExtensionArom: ["shoulderExtensionArom"],
  shoulderExtensionProm: ["shoulderExtensionProm"],
  askMuscleStrength: ["askMuscleStrength"],
  askAdLofGettingDressed: ["askAdLofGettingDressed"],
  askAdLofCombing: ["askAdLofCombing"],
  askAdLofTurnDownTheCollar: ["askAdLofTurnDownTheCollar"],
  askAdLofWearingAnApron: ["askAdLofWearingAnApron"],
  askAdLofUsingToiletPaper: ["askAdLofUsingToiletPaper"],
  askAdLofRubbingTheOppositeArmpit: ["askAdLofRubbingTheOppositeArmpit"],
  askAdLofFasteningTheBelt: ["askAdLofFasteningTheBelt"],
  tooltip: ["tooltip", "svg"],
  svg: ["svg"],
  dialog: ["dialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  askPain: typeof Select;
  shoulderFlexionArom: typeof UploadWrapper;
  shoulderFlexionProm: typeof UploadWrapper;
  shoulderAbductionArom: typeof UploadWrapper;
  shoulderAbductionProm: typeof UploadWrapper;
  shoulderLateralRotationArom: typeof UploadWrapper;
  shoulderLateralRotationProm: typeof UploadWrapper;
  shoulderMedialRotationArom: typeof UploadWrapper;
  shoulderMedialRotationProm: typeof UploadWrapper;
  shoulderExtensionArom: typeof UploadWrapper;
  shoulderExtensionProm: typeof UploadWrapper;
  askMuscleStrength: typeof AntdRadioGroup;
  askAdLofGettingDressed: typeof AntdRadioGroup;
  askAdLofCombing: typeof AntdRadioGroup;
  askAdLofTurnDownTheCollar: typeof AntdRadioGroup;
  askAdLofWearingAnApron: typeof AntdRadioGroup;
  askAdLofUsingToiletPaper: typeof AntdRadioGroup;
  askAdLofRubbingTheOppositeArmpit: typeof AntdRadioGroup;
  askAdLofFasteningTheBelt: typeof AntdRadioGroup;
  tooltip: typeof AntdTooltip;
  svg: "svg";
  dialog: typeof Dialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMobileShoulderFollowup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMobileShoulderFollowup__VariantsArgs;
    args?: PlasmicMobileShoulderFollowup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMobileShoulderFollowup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMobileShoulderFollowup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMobileShoulderFollowup__ArgProps,
          internalVariantPropNames: PlasmicMobileShoulderFollowup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMobileShoulderFollowup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMobileShoulderFollowup";
  } else {
    func.displayName = `PlasmicMobileShoulderFollowup.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileShoulderFollowup = Object.assign(
  // Top-level PlasmicMobileShoulderFollowup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    askPain: makeNodeComponent("askPain"),
    shoulderFlexionArom: makeNodeComponent("shoulderFlexionArom"),
    shoulderFlexionProm: makeNodeComponent("shoulderFlexionProm"),
    shoulderAbductionArom: makeNodeComponent("shoulderAbductionArom"),
    shoulderAbductionProm: makeNodeComponent("shoulderAbductionProm"),
    shoulderLateralRotationArom: makeNodeComponent(
      "shoulderLateralRotationArom"
    ),
    shoulderLateralRotationProm: makeNodeComponent(
      "shoulderLateralRotationProm"
    ),
    shoulderMedialRotationArom: makeNodeComponent("shoulderMedialRotationArom"),
    shoulderMedialRotationProm: makeNodeComponent("shoulderMedialRotationProm"),
    shoulderExtensionArom: makeNodeComponent("shoulderExtensionArom"),
    shoulderExtensionProm: makeNodeComponent("shoulderExtensionProm"),
    askMuscleStrength: makeNodeComponent("askMuscleStrength"),
    askAdLofGettingDressed: makeNodeComponent("askAdLofGettingDressed"),
    askAdLofCombing: makeNodeComponent("askAdLofCombing"),
    askAdLofTurnDownTheCollar: makeNodeComponent("askAdLofTurnDownTheCollar"),
    askAdLofWearingAnApron: makeNodeComponent("askAdLofWearingAnApron"),
    askAdLofUsingToiletPaper: makeNodeComponent("askAdLofUsingToiletPaper"),
    askAdLofRubbingTheOppositeArmpit: makeNodeComponent(
      "askAdLofRubbingTheOppositeArmpit"
    ),
    askAdLofFasteningTheBelt: makeNodeComponent("askAdLofFasteningTheBelt"),
    tooltip: makeNodeComponent("tooltip"),
    svg: makeNodeComponent("svg"),
    dialog: makeNodeComponent("dialog"),

    // Metadata about props expected for PlasmicMobileShoulderFollowup
    internalVariantProps: PlasmicMobileShoulderFollowup__VariantProps,
    internalArgProps: PlasmicMobileShoulderFollowup__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMobileShoulderFollowup;
/* prettier-ignore-end */
