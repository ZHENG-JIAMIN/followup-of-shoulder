// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bQFzjFXbkpSsuDuBQNZ8MF
// Component: gS29OBnbSErN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select from "../../Select"; // plasmic-import: kSMvAbxe7o9l/component
import UploadFiles from "../../UploadFiles"; // plasmic-import: uoD6g_MxRxrM/component
import { AntdSegmented } from "@plasmicpkgs/antd5/skinny/registerSegmented";
import { AntdSegmentedOption } from "@plasmicpkgs/antd5/skinny/registerSegmented";
import Button from "../../Button"; // plasmic-import: a1WfQs9Vt8cw/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bQFzjFXbkpSsuDuBQNZ8MF/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: gS29OBnbSErN/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 9NLJZlnVYXvs/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jDpuVvrlPf7y/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  children?: React.ReactNode;
  children2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "children",
  "children2"
);

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  selectOfPain?: Flex__<typeof Select>;
  qianquRom?: Flex__<"div">;
  select?: Flex__<typeof Select>;
  segmented?: Flex__<typeof AntdSegmented>;
  segmented4?: Flex__<typeof AntdSegmented>;
  segmented5?: Flex__<typeof AntdSegmented>;
  segmented6?: Flex__<typeof AntdSegmented>;
  segmented7?: Flex__<typeof AntdSegmented>;
  segmented8?: Flex__<typeof AntdSegmented>;
  segmented9?: Flex__<typeof AntdSegmented>;
  button?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectOfPain.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "segmented.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "segmented4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "segmented5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "segmented6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "segmented7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "segmented8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "segmented9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__g2Iiy)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d8A4K
              )}
            >
              {"\u968f\u8bbf\u4fe1\u606f\u6536\u96c6-\u80a9\u5173\u8282"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0BaLg
              )}
            >
              {
                "\u8bf7\u5982\u5b9e\u586b\u5199\uff0c\u5eb7\u590d\u5e08\u4f1a\u53ca\u65f6\u6839\u636e\u60a8\u7684\u60c5\u51b5\u5206\u6790\u5f53\u524d\u56de\u590d\u8fdb\u5ea6\u662f\u5426\u6b63\u5e38\uff0c\u5e76\u7ed9\u60a8\u53d1\u9001\u5206\u6790\u62a5\u544a\u3002"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Mo1
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {"1.\u6700\u8fd1\u4e00\u5468\u60a8\u7684"}
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u75bc\u75db\u611f"}
                </span>
                <React.Fragment>
                  {
                    "\u5bf9\u60a8\u7684\u6d3b\u52a8\u5f71\u54cd\u7a0b\u5ea6\u5982\u4f55\uff1f"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <Select
              data-plasmic-name={"selectOfPain"}
              data-plasmic-override={overrides.selectOfPain}
              className={classNames("__wab_instance", sty.selectOfPain)}
              name={
                "\u6700\u8fd1\u4e00\u5468\u75bc\u75db\u5bf9\u6d3b\u52a8\u7684\u5f71\u54cd"
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["selectOfPain", "value"])(
                  eventArgs[0]
                );
              }}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: "option2", label: null },
                  { label: null, value: null },
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "Option 1";
                __composite["0"]["label"] = "\u65e0\u75db";
                __composite["1"]["label"] =
                  "\u6709\u65f6\u7565\u5fae\u75bc\u75db";
                __composite["2"]["label"] =
                  "\u8f7b\u5ea6\u75bc\u75db\uff0c\u666e\u901a\u6d3b\u52a8\u65e0\u969c\u788d";
                __composite["2"]["value"] = "option 3";
                __composite["3"]["value"] = "option 4";
                __composite["3"]["label"] =
                  "\u4e2d\u5ea6\u75bc\u75db\uff0c\u80fd\u591f\u5fcd\u53d7";
                __composite["4"]["value"] = "option 5";
                __composite["4"]["label"] =
                  "\u91cd\u5ea6\u75bc\u75db\uff0c\u6d3b\u52a8\u4e25\u91cd\u53d7\u9650";
                __composite["5"]["value"] = "option 6";
                __composite["5"]["label"] =
                  "\u56e0\u75bc\u75db\u800c\u5b8c\u5168\u5e76\u4e0d\u80fd\u6d3b\u52a8";
                return __composite;
              })()}
              placeholder={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hv8KB
                  )}
                >
                  {"\u8bf7\u9009\u62e9\u60a8\u7684\u75bc\u75db\u60c5\u51b5"}
                </div>
              }
              value={generateStateValueProp($state, ["selectOfPain", "value"])}
            />

            <div className={classNames(projectcss.all, sty.freeBox__eedQx)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xUeUr)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/follow_up_page_of_shoulder_zjm/images/疼痛png.png",
                  fullWidth: 415,
                  fullHeight: 219,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"qianquRom"}
              data-plasmic-override={overrides.qianquRom}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.qianquRom
              )}
            >
              <React.Fragment>
                <React.Fragment>{"2.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u524d\u5c48\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2UZgC
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__s5Gmj)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sHcox
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__upVOh)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qkKIt
              )}
            >
              <React.Fragment>
                <React.Fragment>{"3.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u5916\u5c55\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f19Rn
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles___5QEt4)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gKjfG
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__q4B0J)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m61Un
              )}
            >
              <React.Fragment>
                <React.Fragment>{"4.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u5916\u65cb\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2QwDq
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__qJPdw)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hargx
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__ye3K)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lxf9Q
              )}
            >
              <React.Fragment>
                <React.Fragment>{"5.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u5185\u65cb\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wSk5F
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__zNYx)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kZmoP
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__xlCgJ)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dmWi4
              )}
            >
              <React.Fragment>
                <React.Fragment>{"6.\u60a8\u73b0\u5728\u7684"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u6700\u5927"}
                </span>
                <React.Fragment>{"\u80a9\u5173\u8282"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"\u540e\u4f38\u89d2\u5ea6"}
                </span>
                <React.Fragment>
                  {
                    "\uff0c\u8bf7\u62cd\u7167\u4e0a\u4f20\u3002\uff08\u8bf7\u53c2\u8003\u62cd\u7167\u59ff\u52bf\uff0c\u4fbf\u4e8e\u5eb7\u590d\u5e08\u51c6\u786e\u5224\u65ad\uff0c\u53ef\u7531\u5bb6\u4eba\u534f\u52a9\uff09"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p7C17
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u4e3b\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__yjb9Q)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__hhTh8)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"158px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/follow_up_page_of_shoulder_zjm/images/演示图片png.png",
                      fullWidth: 383,
                      fullHeight: 314,
                      aspectRatio: undefined
                    }}
                  />
                ),

                value: args.children
              })}
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wwpEf
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"\u88ab\u52a8\u6d3b\u52a8"}
                </span>
              </React.Fragment>
            </div>
            <UploadFiles
              className={classNames("__wab_instance", sty.uploadFiles__jxNT)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tZhCg)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"158px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/follow_up_page_of_shoulder_zjm/images/演示图片png.png",
                      fullWidth: 383,
                      fullHeight: 314,
                      aspectRatio: undefined
                    }}
                  />
                ),

                value: args.children2
              })}
            </UploadFiles>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k8ImW
              )}
            >
              {
                "7.\u6700\u8fd1\u4e00\u5468\u60a8\u7684\u808c\u8089\u529b\u91cf\u63d0\u5347\u72b6\u51b5\u5982\u4f55\uff1f"
              }
            </div>
            <Select
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              className={classNames("__wab_instance", sty.select)}
              name={
                "\u6700\u8fd1\u4e00\u5468\u75bc\u75db\u5bf9\u6d3b\u52a8\u7684\u5f71\u54cd"
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["select", "value"])(
                  eventArgs[0]
                );
              }}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: "option2", label: null },
                  { label: null, value: null },
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "Option 1";
                __composite["0"]["label"] =
                  "5\u7ea7\uff1a\u53ef\u4ee5\u5bf9\u6297\u5065\u4fa7\u624b\u7684\u963b\u529b\uff0c\u5e76\u80fd\u7ef4\u6301\u5bf9\u6297\u59ff\u52bf";
                __composite["1"]["label"] =
                  "4\u7ea7\uff1a\u53ef\u4ee5\u5bf9\u6297\u5065\u4fa7\u624b\u7684\u963b\u529b\uff0c\u4f46\u4e0d\u80fd\u7ef4\u6301\u5f88\u4e45";
                __composite["2"]["label"] =
                  "3\u7ea7\uff1a\u53ef\u4ee5\u5bf9\u6297\u91cd\u529b\uff0c\u81ea\u4e3b\u5c06\u80a9\u5173\u8282\u5411\u5916\u6253\u5f00";
                __composite["2"]["value"] = "option 3";
                __composite["3"]["value"] = "option 4";
                __composite["3"]["label"] =
                  "2\u7ea7\uff1a\u53ef\u4ee5\u5728\u5e73\u8eba\u4f4d\u7f6e\u4e0b\u5411\u5916\u4f38\u5c55\u80a9\u5173\u8282";
                __composite["4"]["value"] = "option 5";
                __composite["4"]["label"] =
                  "1\u7ea7\uff1a\u65e0\u6cd5\u5728\u5e73\u8eba\u60c5\u51b5\u5411\u5916\u6253\u5f00\u80a9\u5173\u8282\uff0c\u4f46\u662f\u80fd\u6478\u5230\u808c\u8089\u5728\u6536\u7d27";
                __composite["5"]["value"] = "option 6";
                __composite["5"]["label"] =
                  "0\u7ea7\uff1a\u65e0\u6cd5\u5728\u5e73\u8eba\u60c5\u51b5\u5411\u5916\u6253\u5f00\u80a9\u5173\u8282\uff0c\u4e5f\u4e0d\u80fd\u6478\u5230\u808c\u8089\u5728\u6536\u7d27";
                return __composite;
              })()}
              placeholder={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uLt60
                  )}
                >
                  {
                    "\u8bf7\u6839\u636e\u60a8\u7684\u808c\u529b\u60c5\u51b5\u505a\u9009\u62e9"
                  }
                </div>
              }
              value={generateStateValueProp($state, ["select", "value"])}
            />

            <div className={classNames(projectcss.all, sty.columns__zUtBo)}>
              <div className={classNames(projectcss.all, sty.column__uolJ)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aL0Bt
                  )}
                >
                  {"5\u7ea7"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__jhLtF)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uqugk)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"158px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/演示图片png.png",
                    fullWidth: 383,
                    fullHeight: 314,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__vnlAb)}>
              <div className={classNames(projectcss.all, sty.column__rYk1L)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fzjKx
                  )}
                >
                  {"4\u7ea7"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__qMvDn)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uJKda)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"158px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/演示图片png.png",
                    fullWidth: 383,
                    fullHeight: 314,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__u9Tkl)}>
              <div className={classNames(projectcss.all, sty.column___9Ob1B)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gOav
                  )}
                >
                  {"3\u7ea7"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__is3Yx)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xr7Ye)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"158px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/演示图片png.png",
                    fullWidth: 383,
                    fullHeight: 314,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__e5Tn)}>
              <div className={classNames(projectcss.all, sty.column__ozp5M)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gvE5A
                  )}
                >
                  {"2\u7ea7"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__qddL)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__joDkQ)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"158px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/演示图片png.png",
                    fullWidth: 383,
                    fullHeight: 314,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__vMbq3)}>
              <div className={classNames(projectcss.all, sty.column__rjMEi)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nsHd
                  )}
                >
                  {"1\u7ea7"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__rdonp)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__sz5EE)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"158px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/演示图片png.png",
                    fullWidth: 383,
                    fullHeight: 314,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__dm6Pc)}>
              <div className={classNames(projectcss.all, sty.column__nUuy9)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7APOs
                  )}
                >
                  {"0\u7ea7"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__yx2Sp)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__a6Phi)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"158px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/follow_up_page_of_shoulder_zjm/images/演示图片png.png",
                    fullWidth: 383,
                    fullHeight: 314,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cw5M5
              )}
            >
              {
                "8.\u6700\u8fd1\u4e00\u5468\u60a8\u7684\u65e5\u5e38\u751f\u6d3b\u6d3b\u52a8\u80fd\u529b\u5982\u4f55\uff1f"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__npTi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cz1Bu
                )}
              >
                {"\u7a7f\u4e0a\u8863"}
              </div>
              <AntdSegmented
                data-plasmic-name={"segmented"}
                data-plasmic-override={overrides.segmented}
                className={classNames("__wab_instance", sty.segmented)}
                onChange={generateStateOnChangeProp($state, [
                  "segmented",
                  "value"
                ])}
                options={(() => {
                  const __composite = [
                    { label: null, value: "Option 1" },
                    { label: null, value: "Option 2" },
                    { label: null, value: "Option 3" }
                  ];
                  __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                  __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                  __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                  return __composite;
                })()}
                optionsSlot={
                  <React.Fragment>
                    <AntdSegmentedOption
                      className={classNames(
                        "__wab_instance",
                        sty.segmentedOption__yTkQt
                      )}
                      value={"Option 1"}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uiaHt
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__dkbwq)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          src={"https://static1.plasmic.app/home-outlined.svg"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9Vg0
                          )}
                        >
                          {"Option 1"}
                        </div>
                      </Stack__>
                    </AntdSegmentedOption>
                    <AntdSegmentedOption
                      className={classNames(
                        "__wab_instance",
                        sty.segmentedOption__rKrpK
                      )}
                      value={"Option 2"}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eSpgO
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___2QiZs)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          src={"https://static1.plasmic.app/home-outlined.svg"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wYinB
                          )}
                        >
                          {"Option 2"}
                        </div>
                      </Stack__>
                    </AntdSegmentedOption>
                  </React.Fragment>
                }
                useSlotOptions={false}
                value={generateStateValueProp($state, ["segmented", "value"])}
              />

              <div className={classNames(projectcss.all, sty.freeBox__yHiN0)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nrdoC
                  )}
                >
                  {"\u68b3\u5934"}
                </div>
                <AntdSegmented
                  data-plasmic-name={"segmented4"}
                  data-plasmic-override={overrides.segmented4}
                  className={classNames("__wab_instance", sty.segmented4)}
                  onChange={generateStateOnChangeProp($state, [
                    "segmented4",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: "Option 1" },
                      { label: null, value: "Option 2" },
                      { label: null, value: "Option 3" }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  optionsSlot={
                    <React.Fragment>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__sgwXg
                        )}
                        value={"Option 1"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vWUiF
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__xriRw)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7ZYrw
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__fjcAc
                        )}
                        value={"Option 2"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__l0Mrr
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__sduRv)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__epdb8
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                    </React.Fragment>
                  }
                  useSlotOptions={false}
                  value={generateStateValueProp($state, [
                    "segmented4",
                    "value"
                  ])}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dG3Xt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yZyC3
                  )}
                >
                  {"\u7ffb\u8863\u9886"}
                </div>
                <AntdSegmented
                  data-plasmic-name={"segmented5"}
                  data-plasmic-override={overrides.segmented5}
                  className={classNames("__wab_instance", sty.segmented5)}
                  onChange={generateStateOnChangeProp($state, [
                    "segmented5",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: "Option 1" },
                      { label: null, value: "Option 2" },
                      { label: null, value: "Option 3" }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  optionsSlot={
                    <React.Fragment>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__p12T3
                        )}
                        value={"Option 1"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xfJtN
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__zg2Er)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fYw0
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__c5F0C
                        )}
                        value={"Option 2"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z0Emg
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___3UuTo)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aqSzr
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                    </React.Fragment>
                  }
                  useSlotOptions={false}
                  value={generateStateValueProp($state, [
                    "segmented5",
                    "value"
                  ])}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___7Oan4)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dkMj2
                  )}
                >
                  {"\u7cfb\u56f4\u88d9"}
                </div>
                <AntdSegmented
                  data-plasmic-name={"segmented6"}
                  data-plasmic-override={overrides.segmented6}
                  className={classNames("__wab_instance", sty.segmented6)}
                  onChange={generateStateOnChangeProp($state, [
                    "segmented6",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: "Option 1" },
                      { label: null, value: "Option 2" },
                      { label: null, value: "Option 3" }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  optionsSlot={
                    <React.Fragment>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__azyzF
                        )}
                        value={"Option 1"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ewTBi
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__oyJ9Y)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__erxj5
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__gUck
                        )}
                        value={"Option 2"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aMZdU
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__ni0VM)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4Jltx
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                    </React.Fragment>
                  }
                  useSlotOptions={false}
                  value={generateStateValueProp($state, [
                    "segmented6",
                    "value"
                  ])}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___9LfeL)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iTtvP
                  )}
                >
                  {"\u4f7f\u7528\u624b\u7eb8"}
                </div>
                <AntdSegmented
                  data-plasmic-name={"segmented7"}
                  data-plasmic-override={overrides.segmented7}
                  className={classNames("__wab_instance", sty.segmented7)}
                  onChange={generateStateOnChangeProp($state, [
                    "segmented7",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: "Option 1" },
                      { label: null, value: "Option 2" },
                      { label: null, value: "Option 3" }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  optionsSlot={
                    <React.Fragment>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__prB6Z
                        )}
                        value={"Option 1"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ix0Zv
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__xvi4O)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__o3MWv
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__sViv8
                        )}
                        value={"Option 2"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7X6Z9
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__dHxR)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__haB0Q
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                    </React.Fragment>
                  }
                  useSlotOptions={false}
                  value={generateStateValueProp($state, [
                    "segmented7",
                    "value"
                  ])}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___2OPUy)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tanQj
                  )}
                >
                  {"\u64e6\u5bf9\u4fa7\u814b\u7a9d"}
                </div>
                <AntdSegmented
                  data-plasmic-name={"segmented8"}
                  data-plasmic-override={overrides.segmented8}
                  className={classNames("__wab_instance", sty.segmented8)}
                  onChange={generateStateOnChangeProp($state, [
                    "segmented8",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: "Option 1" },
                      { label: null, value: "Option 2" },
                      { label: null, value: "Option 3" }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  optionsSlot={
                    <React.Fragment>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__f4E5R
                        )}
                        value={"Option 1"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jCxJs
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__hOik)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__v4DAn
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__xrLpm
                        )}
                        value={"Option 2"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__n1Oce
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__iX57I)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xYr1X
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                    </React.Fragment>
                  }
                  useSlotOptions={false}
                  value={generateStateValueProp($state, [
                    "segmented8",
                    "value"
                  ])}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___0Bvqd)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vmshr
                  )}
                >
                  {"\u7cfb\u8170\u5e26"}
                </div>
                <AntdSegmented
                  data-plasmic-name={"segmented9"}
                  data-plasmic-override={overrides.segmented9}
                  className={classNames("__wab_instance", sty.segmented9)}
                  onChange={generateStateOnChangeProp($state, [
                    "segmented9",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [
                      { label: null, value: "Option 1" },
                      { label: null, value: "Option 2" },
                      { label: null, value: "Option 3" }
                    ];
                    __composite["0"]["label"] = "\u5bb9\u6613\u5b8c\u6210";
                    __composite["1"]["label"] = "\u52c9\u5f3a\u5b8c\u6210";
                    __composite["2"]["label"] = "\u65e0\u6cd5\u5b8c\u6210";
                    return __composite;
                  })()}
                  optionsSlot={
                    <React.Fragment>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__gZsm
                        )}
                        value={"Option 1"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sqKar
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__y93Zd)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uoeTa
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                      <AntdSegmentedOption
                        className={classNames(
                          "__wab_instance",
                          sty.segmentedOption__biuF5
                        )}
                        value={"Option 2"}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2Z
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__cCTu)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={
                              "https://static1.plasmic.app/home-outlined.svg"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yKMc
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Stack__>
                      </AntdSegmentedOption>
                    </React.Fragment>
                  }
                  useSlotOptions={false}
                  value={generateStateValueProp($state, [
                    "segmented9",
                    "value"
                  ])}
                />
              </div>
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"green"}
              startIcon={
                <ChecksvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              }
              submitsForm={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zqpbp
                )}
              >
                {"\u63d0\u4ea4"}
              </div>
            </Button>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "selectOfPain",
    "qianquRom",
    "select",
    "segmented",
    "segmented4",
    "segmented5",
    "segmented6",
    "segmented7",
    "segmented8",
    "segmented9",
    "button",
    "svg"
  ],
  selectOfPain: ["selectOfPain"],
  qianquRom: ["qianquRom"],
  select: ["select"],
  segmented: ["segmented"],
  segmented4: ["segmented4"],
  segmented5: ["segmented5"],
  segmented6: ["segmented6"],
  segmented7: ["segmented7"],
  segmented8: ["segmented8"],
  segmented9: ["segmented9"],
  button: ["button", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  selectOfPain: typeof Select;
  qianquRom: "div";
  select: typeof Select;
  segmented: typeof AntdSegmented;
  segmented4: typeof AntdSegmented;
  segmented5: typeof AntdSegmented;
  segmented6: typeof AntdSegmented;
  segmented7: typeof AntdSegmented;
  segmented8: typeof AntdSegmented;
  segmented9: typeof AntdSegmented;
  button: typeof Button;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    selectOfPain: makeNodeComponent("selectOfPain"),
    qianquRom: makeNodeComponent("qianquRom"),
    select: makeNodeComponent("select"),
    segmented: makeNodeComponent("segmented"),
    segmented4: makeNodeComponent("segmented4"),
    segmented5: makeNodeComponent("segmented5"),
    segmented6: makeNodeComponent("segmented6"),
    segmented7: makeNodeComponent("segmented7"),
    segmented8: makeNodeComponent("segmented8"),
    segmented9: makeNodeComponent("segmented9"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
